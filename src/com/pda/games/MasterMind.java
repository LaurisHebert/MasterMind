package com.pda.games;

import java.util.Arrays;

public abstract class MasterMind {

    private final static int size = 4;
    private final static int minimumNumber = 0;
    private final static int MaximumNumber = 9;
    private final int[] playerOneDefense;
    private final int[] playerTwoDefense;
    private int maximumRound;
    private int roundCount = 0;
    private boolean playerOneCorrespondence = false;
    private boolean playerTwoCorrespondence = false;

    protected MasterMind(int maximumRound, int[] playerOneDefense, int[] playerTwoDefense) {
        this.maximumRound = maximumRound;
        this.playerOneDefense = playerOneDefense;
        this.playerTwoDefense = playerTwoDefense;
    }

    public static int getSize() {
        return size;
    }

    protected static int getMinimumNumber() {
        return minimumNumber;
    }

    protected static int getMaximumNumber() {
        return MaximumNumber;
    }

    public int[] getPlayerOneDefense() {
        return playerOneDefense;
    }

    public int[] getPlayerTwoDefense() {
        return playerTwoDefense;
    }

    protected int getMaximumRound() {
        return maximumRound;
    }

    protected int getRoundCount() {
        return roundCount;
    }

    protected void setRoundCount(int roundCount) {
        this.roundCount = roundCount;
    }

    protected boolean isPlayerTwoCorrespondence() {
        return playerTwoCorrespondence;
    }

    protected boolean isPlayerOneCorrespondence() {
        return playerOneCorrespondence;
    }

    public abstract void round();

    /**
     * check if the player one attack match with the player two defense
     * @param playerOneAttack is the attack generated by the player one
     */
    protected void verifyAttackPlayerOne(int[] playerOneAttack) {
        if (playerOneCanPlayAgain()) {
            playerOneCorrespondence = Arrays.equals(playerTwoDefense, playerOneAttack);
            roundCount++;
        }
    }

    /**
     * check if the player two attack match with the player one defense
     * @param playerTwoAttack is the attack generated by the player two
     */
    protected void verifyAttackPlayerTwo(int[] playerTwoAttack) {
        if (playerTwoCanPlayAgain()) {
            playerTwoCorrespondence = Arrays.equals(playerOneDefense, playerTwoAttack);
            roundCount++;
        }
    }

    /**
     * @return if the player one can pass to the next turn
     */
    public boolean playerOneCanPlayAgain() {
        return !playerOneCorrespondence && roundCount < maximumRound;
    }

    /**
     * @return if the player two can pass to the next turn
     */
    public boolean playerTwoCanPlayAgain() {
        return !playerTwoCorrespondence && roundCount < maximumRound;
    }

    protected abstract void playerTwoClue();

    protected abstract void playerOneClue();


    public abstract boolean botWin();

    public abstract boolean botLose();

    public abstract boolean humanWin();

    public abstract boolean humanLose();


}

